package Book;

import Anotation.CLI;
import Model.Contact;
import Model.PhoneBook;
import Model.PhoneType;

import java.util.Map;
import java.util.Scanner;

@CLI(value = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
public class PhoneBookCLI {
    private final Scanner scanner;
    private final PhoneBook phoneBook;

    public PhoneBookCLI() {
        this.phoneBook = new PhoneBook();
        this.scanner = new Scanner(System.in);
    }

    public void start() {
        while (true) {
            printMainMenu();
            String choice = scanner.nextLine();

            switch (choice) {
                case "1" -> addNewContact();
                case "2" -> allContacts();
                case "3" -> searchContact();
                //case "4" -> addNumberToExistingContact();
                case "5" -> { System.out.println("–í—ã—Ö–æ–¥..."); return; }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!");
            }
        }
    }

    private void allContacts() {
        Map<String, Contact> contacts = phoneBook.getAllContacts();

        if (contacts.isEmpty()) {
            System.out.println("\nüì≠ –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞!");
            return;
        }

        System.out.println("\nüìã –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:");
        contacts.forEach((name, contact) -> System.out.println(contact));
    }

    private void searchContact() {
        System.out.println("\n–ü–æ–∏—Å–∫ –ø–æ:");
        System.out.println("1. –ò–º–µ–Ω–∏");
        System.out.println("2. –ù–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        System.out.print("> ");

        String choice = scanner.nextLine();

        switch (choice) {
            case "1" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
                Contact contact = phoneBook.findContactByName(scanner.nextLine().toLowerCase());
                System.out.println(contact != null ? contact : "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            case "2" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ");
                Contact contact = phoneBook.findContactByPhoneNumber(scanner.nextLine());
                System.out.println(contact != null ? contact : "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
        }
    }

    private void printMainMenu() {
        System.out.println("\n\uD83D\uDCDE –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç");
        System.out.println("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã");
        System.out.println("3. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
        System.out.println("4. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É");
        System.out.println("5. –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
    }

    @CLI
    private void addNewContact() {
        System.out.print("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.out.println("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
            return;
        }

        if (phoneBook.addContact(name)) {
            System.out.println("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
            addNumbersToContact(name);
        } else {
            System.out.println("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        }
    }

    @CLI
    private void addNumbersToContact(String contactName) {
        while (true) {
            printPhoneTypeMenu();
            String choice = scanner.nextLine();

            if (choice.equals("0")) break;

            try {
                int typeIndex = Integer.parseInt(choice) - 1;
                PhoneType type = PhoneType.values()[typeIndex];

                System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ");
                String number = scanner.nextLine().trim();

                if (number.isEmpty()) {
                    System.out.println("‚ùå –ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
                    continue;
                }

                if (phoneBook.addNumberToContact(contactName, type, number)) {
                    System.out.println("‚úÖ –ù–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!");
                } else {
                    System.out.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞!");
                }
            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–æ–º–µ—Ä–∞!");
            }
        }
    }

    private void printPhoneTypeMenu() {
        System.out.println("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–º–µ—Ä–∞:");
        PhoneType[] types = PhoneType.values();
        for (int i = 0; i < types.length; i++) {
            System.out.printf("%d. %s%n", i + 1, types[i]);
        }
        System.out.println("0. –ù–∞–∑–∞–¥");
        System.out.print("> ");
    }
}
